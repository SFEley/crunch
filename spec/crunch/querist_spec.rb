require File.dirname(__FILE__) + '/../spec_helper'

module Crunch
  describe Querist do
    before(:each) do
      @database = stub "Database"
      @collection = stub "Collection", database: @database, full_name: 'crunch_test.TestCollection'
      @query = Fieldset.new '_id' => 7
      @this = Querist.new @collection, @query
      
    end
  
    it "knows its collection name" do
      @this.collection_name.should == 'crunch_test.TestCollection'
    end

    it "can have query conditions" do
      @this.should respond_to(:query)
    end
  
    it "has fields queried on" do
      @this.should respond_to(:fields)
    end
  
    it "has a starting number" do
      @this.should respond_to(:skip)
    end
  
    it "has a limit" do
      @this.should respond_to(:limit)
    end
  
    describe "querying" do
      before(:each) do
        @reply_data = [0x06,0x01,0x00,0x00,0x23,0x38,0x27,0xDE,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xE2,0x00,0x00,0x00,0x07,0x5F,0x69,0x64,0x00,0x4C,0x44,0xD1,0x8D,0x3F,0x16,0x51,0x03,0x02,0x00,0x00,0x01,0x0E,0x66,0x6F,0x6F,0x00,0x04,0x00,0x00,0x00,0x62,0x61,0x72,0x00,0x01,0x6E,0x75,0x6D,0x6D,0x79,0x00,0x3B,0xFC,0x35,0x59,0xA3,0x0E,0x27,0x40,0x02,0x73,0x74,0x72,0x69,0x6E,0x67,0x79,0x00,0xA3,0x00,0x00,0x00,0x4E,0x6F,0x77,0x20,0x69,0x73,0x20,0x74,0x68,0x65,0x20,0x74,0x69,0x6D,0x65,0x20,0x66,0x6F,0x72,0x20,0x61,0x6C,0x6C,0x20,0x67,0x6F,0x6F,0x64,0x20,0x6D,0x65,0x6E,0x20,0x74,0x6F,0x20,0x63,0x6F,0x6D,0x65,0x20,0x74,0x6F,0x20,0x74,0x68,0x65,0x20,0x61,0x69,0x64,0x20,0x6F,0x66,0x20,0x74,0x68,0x65,0x69,0x72,0x20,0x70,0x61,0x72,0x74,0x79,0x2E,0x20,0x54,0x6F,0x20,0x73,0x69,0x74,0x20,0x69,0x6E,0x20,0x73,0x75,0x6C,0x6C,0x65,0x6E,0x20,0x73,0x69,0x6C,0x65,0x6E,0x63,0x65,0x20,0x6F,0x6E,0x20,0x61,0x20,0x64,0x75,0x6C,0x6C,0x20,0x64,0x61,0x72,0x6B,0x20,0x64,0x6F,0x63,0x6B,0x2E,0x2E,0x2E,0x20,0x20,0x54,0x68,0x65,0x20,0x71,0x75,0x69,0x63,0x6B,0x20,0x62,0x72,0x6F,0x77,0x6E,0x20,0x66,0x6F,0x78,0x20,0x6A,0x75,0x6D,0x70,0x65,0x64,0x20,0x6F,0x76,0x65,0x72,0x20,0x74,0x68,0x65,0x20,0x6C,0x61,0x7A,0x79,0x20,0x64,0x6F,0x67,0x2E,0x00,0x00,0x06,0x01,0x00,0x00,0x23,0x38,0x27,0xDE,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xE2,0x00,0x00,0x00,0x07,0x5F,0x69,0x64,0x00,0x4C,0x44,0xD1,0x8D,0x3F,0x16,0x51,0x03,0x02,0x00,0x00,0x01,0x0E,0x66,0x6F,0x6F,0x00,0x04,0x00,0x00,0x00,0x62,0x61,0x72,0x00,0x01,0x6E,0x75,0x6D,0x6D,0x79,0x00,0x3B,0xFC,0x35,0x59,0xA3,0x0E,0x27,0x40,0x02,0x73,0x74,0x72,0x69,0x6E,0x67,0x79,0x00,0xA3,0x00,0x00,0x00,0x4E,0x6F,0x77,0x20,0x69,0x73,0x20,0x74,0x68,0x65,0x20,0x74,0x69,0x6D,0x65,0x20,0x66,0x6F,0x72,0x20,0x61,0x6C,0x6C,0x20,0x67,0x6F,0x6F,0x64,0x20,0x6D,0x65,0x6E,0x20,0x74,0x6F,0x20,0x63,0x6F,0x6D,0x65,0x20,0x74,0x6F,0x20,0x74,0x68,0x65,0x20,0x61,0x69,0x64,0x20,0x6F,0x66,0x20,0x74,0x68,0x65,0x69,0x72,0x20,0x70,0x61,0x72,0x74,0x79,0x2E,0x20,0x54,0x6F,0x20,0x73,0x69,0x74,0x20,0x69,0x6E,0x20,0x73,0x75,0x6C,0x6C,0x65,0x6E,0x20,0x73,0x69,0x6C,0x65,0x6E,0x63,0x65,0x20,0x6F,0x6E,0x20,0x61,0x20,0x64,0x75,0x6C,0x6C,0x20,0x64,0x61,0x72,0x6B,0x20,0x64,0x6F,0x63,0x6B,0x2E,0x2E,0x2E,0x20,0x20,0x54,0x68,0x65,0x20,0x71,0x75,0x69,0x63,0x6B,0x20,0x62,0x72,0x6F,0x77,0x6E,0x20,0x66,0x6F,0x78,0x20,0x6A,0x75,0x6D,0x70,0x65,0x64,0x20,0x6F,0x76,0x65,0x72,0x20,0x74,0x68,0x65,0x20,0x6C,0x61,0x7A,0x79,0x20,0x64,0x6F,0x67,0x2E,0x00,0x00,0x06,0x01,0x00,0x00,0x23,0x38,0x27,0xDE,0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xE2,0x00,0x00,0x00,0x07,0x5F,0x69,0x64,0x00,0x4C][0..261].pack('c*')
      end
    
      it "goes to the database" do
        @database.expects(:<<).with(instance_of(Crunch::QueryMessage))
        tick {@this.refresh}
      end
     
      it "fails if the size is wrong" do
        result = nil
        @this.errback{|exception| result = exception}
        @this.set_deferred_status(:succeeded, @reply_data[0..260])
        result.should be_a(HeaderError)
        result.message.should =~ /261.*262/
      end
      
      it "fails if the response_to is wrong" do
        QueryMessage.any_instance.stubs(:request_id).returns(-1)
        result = nil
        @this.errback{|exception| result = exception}
        tick {@this.set_deferred_status(:succeeded, @reply_data)}
        result.should be_a(HeaderError)
        result.message.should =~ /-1.*9/
      end
        
      it "fails if the response flags show an error from MongoDB"
      
      it "returns the error message if the response flags show an error from MongoDB"
      
      it "gets data back from the server" do
        QueryMessage.any_instance.stubs(:request_id).returns(9)
        result = nil
        @this.callback{|header, documents| result = documents}
        @this.set_deferred_status(:succeeded, @reply_data)
        result.should == @reply_data[36..261]
      end
    end
  end
end